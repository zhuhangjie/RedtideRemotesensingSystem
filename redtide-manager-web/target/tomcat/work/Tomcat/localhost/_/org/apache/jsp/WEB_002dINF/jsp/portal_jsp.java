/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-12-29 01:32:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class portal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>赤潮系统首页</title>\r\n");
      out.write("\r\n");
      out.write("<!-- Bootstrap -->\r\n");
      out.write("    <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/bootstrap-datetimepicker.min.css\" rel=\"stylesheet\" >\r\n");
      out.write("     <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/sweetalert.css\" rel=\"stylesheet\" type=\"text/css\" > \r\n");
      out.write("    <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/css/dialog.css\" rel=\"stylesheet\" >\r\n");
      out.write("    <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/jquery-1.11.3.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/bootstrap.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/bootstrap-datetimepicker.js\"></script>\r\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/locales/bootstrap-datetimepicker.zh-CN.js\"></script>\r\n");
      out.write("\t <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/sweetalert.min.js\"></script> \r\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/dialog.js\"></script>\r\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/highcharts/highcharts.js\"></script>\r\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/js/highcharts/modules/exporting.js\"></script>\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\tbody{\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("            background: #fff;\r\n");
      out.write("        }\r\n");
      out.write("\t #map{\r\n");
      out.write("\t \t\ttop:-21px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("            height: 616px;\r\n");
      out.write("            border:0px solid #3473b7; \r\n");
      out.write("        }\r\n");
      out.write("      #colorbar{\r\n");
      out.write("         weight:140px;\r\n");
      out.write("         height: 280px;\r\n");
      out.write("     } \r\n");
      out.write("     #algbar{\r\n");
      out.write("         weight:80px;\r\n");
      out.write("         height: 80px;\r\n");
      out.write("     } \r\n");
      out.write("     #modelButton{\r\n");
      out.write("\t\t\t/* top:-21px; */\r\n");
      out.write("\t\t\ttop:8px;\r\n");
      out.write("\t\t\t/* right:3px; */\r\n");
      out.write("        \tposition: relative;\r\n");
      out.write("     }\r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/libs/SuperMap.Include.js\"></script> \r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t//iClient需要用到的变量\r\n");
      out.write("\tvar map, local, layer, drawLine, lineLayer, drawPolygon, polygonLayer, url, baseUrl;\r\n");
      out.write("\tvar url1, url2, layer1, layer2, pickedDate;\r\n");
      out.write("\t//防止统计页面的月份选择栏被被重新打开\r\n");
      out.write("\tvar isMonthMenuOpened = false;\r\n");
      out.write("\t//\r\n");
      out.write("\tvar rt_area = 0;\r\n");
      out.write("\tvar rt_distance = 0;\r\n");
      out.write("\t//设置一个只清除回显面积的标签\r\n");
      out.write("\tvar areaFlag = 0;\r\n");
      out.write("\t//界面交互需要用到的变量\r\n");
      out.write("\tvar chlrtConversion = \"0\";\r\n");
      out.write("\tvar currentDate, currentDate_changed, date_nomal;\r\n");
      out.write("\tstyle = {\r\n");
      out.write("            strokeColor: \"#304DBE\",\r\n");
      out.write("            strokeWidth: 2,\r\n");
      out.write("            pointerEvents: \"visiblePainted\",\r\n");
      out.write("            fillColor: \"#304DBE\",\r\n");
      out.write("            fillOpacity: 0.8\r\n");
      out.write("        },\r\n");
      out.write("        /* 一定要改回来 */\r\n");
      out.write("    baseUrl = \"http://localhost:8090/iserver/services/map-databaseworkspace/rest/maps/\"\r\n");
      out.write("    //baseUrl = \"http://localhost:8090/iserver/services/map-RedtideWorkspace/rest/maps/\"\r\n");
      out.write("\turl1 = \"\";\r\n");
      out.write("\turl2 = \"\";\r\n");
      out.write("\tfunction init() {\r\n");
      out.write("\t\t$().alert(\"1\");\r\n");
      out.write("\t\t//取得回显的面积值\r\n");
      out.write("\t\tvar tempResult = $(\"#result\").val();\r\n");
      out.write("\t\t/* 页面端把传过来的科学计数法的double格式转换成标准的String格式\r\n");
      out.write("\t\ttempResult = parseFloat(tempResult).toString(); */\r\n");
      out.write("\t\t//把显示的距离值更改为回显的值,先四舍五入\r\n");
      out.write("\t\tvar tempResult_km_round = (tempResult/1000000).toFixed(2);\r\n");
      out.write("\t\tif(tempResult==0) {\r\n");
      out.write("\t\t\ttempResult_km_round = $(\"#resultP\").val();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$(\"#area_result\").html(\"测量结果:\" + tempResult_km_round + \"平方千米\"); \r\n");
      out.write("\t\tvar date_Info = $(\"#dateInfo\").val(); \r\n");
      out.write("\t\tdate_nomal = date_Info.split('_').join('-');\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//设置云图路径，图片服务器\r\n");
      out.write("\t    var cloudSrc = \"http://localhost:8080/picture/cloud\" + date_nomal + \".jpg\"; \r\n");
      out.write("\t    \r\n");
      out.write("\t    $(\"#cloudImage\").attr(\"src\",cloudSrc);\r\n");
      out.write("\t\t/* $(\"#cloudImage\").attr(\"src\",\"\" + \"\"); */\r\n");
      out.write("\t\turl1 = baseUrl + \"chl\" + date_Info +\"map\";\r\n");
      out.write("\t\t\r\n");
      out.write("\t\turl2 = baseUrl + \"RT\" + date_Info +\"map\";\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//借用一下马上换回来,用来展示的图一般情况下注销就行了\r\n");
      out.write("\t\t//url2 = \"http://localhost:8090/iserver/services/map-China/rest/maps/China\";\r\n");
      out.write("\t\t//新建线矢量图层\r\n");
      out.write("        lineLayer = new SuperMap.Layer.Vector(\"lineLayer\");\r\n");
      out.write("        //对线图层应用样式style（前面有定义）\r\n");
      out.write("        lineLayer.style = style;\r\n");
      out.write("        //创建画线控制，图层是lineLayer;这里DrawFeature(图层,类型,属性)；multi:true在将要素放入图层之前是否先将其放入几何图层中\r\n");
      out.write("        drawLine = new SuperMap.Control.DrawFeature(lineLayer, SuperMap.Handler.Path, { multi: true });\r\n");
      out.write("        /*\r\n");
      out.write("        \t注册featureadded事件,触发drawCompleted()方法\r\n");
      out.write("        \t例如注册\"loadstart\"事件的单独监听\r\n");
      out.write("        \tevents.on({ \"loadstart\": loadStartListener });\r\n");
      out.write("        */\r\n");
      out.write("        drawLine.events.on({\"featureadded\": drawLineCompleted});\r\n");
      out.write("        \r\n");
      out.write("      \t//新建面矢量图层\r\n");
      out.write("        polygonLayer = new SuperMap.Layer.Vector(\"polygonLayer\");\r\n");
      out.write("        //对面图层应用样式style（前面有定义）\r\n");
      out.write("        polygonLayer.style = style;\r\n");
      out.write("        /*\r\n");
      out.write("\t\t        注册featureadded事件,触发drawCompleted()方法\r\n");
      out.write("\t\t        例如注册\"loadstart\"事件的单独监听\r\n");
      out.write("        events.on({ \"loadstart\": loadStartListener });\r\n");
      out.write("        */\r\n");
      out.write("       //创建画面控制，图层是polygonLayer\r\n");
      out.write("       drawPolygon = new SuperMap.Control.DrawFeature(polygonLayer, SuperMap.Handler.Polygon);\r\n");
      out.write("       drawPolygon.events.on({\"featureadded\": drawPolygonCompleted});\r\n");
      out.write("        \r\n");
      out.write("       map = new SuperMap.Map(\"map\",{controls: [\r\n");
      out.write("            new SuperMap.Control.LayerSwitcher(),\r\n");
      out.write("            new SuperMap.Control.ScaleLine(),\r\n");
      out.write("            new SuperMap.Control.Zoom(),\r\n");
      out.write("            //new SuperMap.Control.OverviewMap(),\r\n");
      out.write("            new SuperMap.Control.MousePosition(),\r\n");
      out.write("            new SuperMap.Control.Navigation({\r\n");
      out.write("                dragPanOptions: {\r\n");
      out.write("                    enableKinetic: true\r\n");
      out.write("                }}),\r\n");
      out.write("            drawLine,\r\n");
      out.write("            drawPolygon]\r\n");
      out.write("        });\r\n");
      out.write("      //定义layer图层，TiledDynamicRESTLayer：分块动态 REST 图层\r\n");
      out.write("        layer1 = new SuperMap.Layer.TiledDynamicRESTLayer(\"ChlMap\", url1, { transparent: true, cacheEnabled: true }, { maxResolution: \"auto\" });\r\n");
      out.write("      \t//为图层初始化完毕添加addLayer()事件\r\n");
      out.write("        layer1.events.on({\"layerInitialized\":addLayer1});\r\n");
      out.write("      \t//这个只是为了显示色素图表所以才在初始化完毕后进入赤潮模式\r\n");
      out.write("        toRTModel();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction addLayer1() {\r\n");
      out.write("        /* map.addLayers([layer, lineLayer, polygonLayer]);\r\n");
      out.write("\t\tmap.setCenter(new SuperMap.LonLat(122.31, 30.16), 0); */\r\n");
      out.write("\t\tlayer2 = new SuperMap.Layer.TiledDynamicRESTLayer(\"RtMap\", url2, {transparent: true, cacheEnabled: true});\r\n");
      out.write("        layer2.events.on({\"layerInitialized\":addLayer2});\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("\tfunction addLayer2() {\r\n");
      out.write("\t\tlayer1.isBaseLayer=true;\r\n");
      out.write("\t\tlayer2.isBaseLayer=true;\r\n");
      out.write("\t\t//这里可以选择初始显示的是赤潮还是叶绿素layer2在前面代表默认先显示赤潮\r\n");
      out.write("\t    map.addLayers([layer2, layer1, lineLayer, polygonLayer]);\r\n");
      out.write("\t\tmap.setCenter(new SuperMap.LonLat(122.31, 30.16), 3);\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("\t//开始测量距离\r\n");
      out.write("\tfunction distanceMeasure(){\r\n");
      out.write("\t\t//测量距离开始时候如果正在测量面积的状态，停止面积测量画面控制状态。\r\n");
      out.write("\t\tdrawPolygon.deactivate();\r\n");
      out.write("\t\t//测量距离前如果前面测量过面积，先把面积图层全部清空\r\n");
      out.write("\t\tpolygonLayer.removeAllFeatures();\r\n");
      out.write("\t\t//开启测量距离模式\r\n");
      out.write("        drawLine.activate();\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("\t//开始测量面积\r\n");
      out.write("\tfunction areaMeasure(){\r\n");
      out.write("\t\t//这里由于是可以连续测量面积或者连续测量长度的模式所以不能用清空方法把整个矢量层以及参数偶读清空\r\n");
      out.write("        /* clearFeatures(); */\r\n");
      out.write("        //测量距离开始时候如果正在测量长度的状态，停止长度测量画面控制状态\r\n");
      out.write("        drawLine.deactivate();\r\n");
      out.write("        //测量距离前如果前面测量过距离，先把距离图层全部清空\r\n");
      out.write("        lineLayer.removeAllFeatures();\r\n");
      out.write("        //开始测量面积模式\r\n");
      out.write("        drawPolygon.activate();\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("\t//绘完触发事件\r\n");
      out.write("    function drawLineCompleted(drawGeometryArgs) {\r\n");
      out.write("        //停止画面控制\r\n");
      out.write("        drawLine.deactivate();\r\n");
      out.write("        //获得图层几何对象\r\n");
      out.write("        var geometry = drawGeometryArgs.feature.geometry,\r\n");
      out.write("                measureParam = new SuperMap.REST.MeasureParameters(geometry), /* MeasureParameters：量算参数类。 客户端要量算的地物间的距离或某个区域的面积*/\r\n");
      out.write("                myMeasuerService = new SuperMap.REST.MeasureService(url1); //量算服务类，该类负责将量算参数传递到服务端，并获取服务端返回的量算结果\r\n");
      out.write("        myMeasuerService.events.on({ \"processCompleted\": measureLineCompleted });\r\n");
      out.write("\r\n");
      out.write("        //对MeasureService类型进行判断和赋值，当判断出是LineString时设置MeasureMode.DISTANCE，否则是MeasureMode.AREA\r\n");
      out.write("\r\n");
      out.write("        myMeasuerService.measureMode = SuperMap.REST.MeasureMode.DISTANCE;\r\n");
      out.write("\r\n");
      out.write("        myMeasuerService.processAsync(measureParam); //processAsync负责将客户端的量算参数传递到服务端。\r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("  //面积测量结束调用事件\r\n");
      out.write("    function drawPolygonCompleted(drawGeometryArgs) {\r\n");
      out.write("        //停止画面控制\r\n");
      out.write("        drawPolygon.deactivate();\r\n");
      out.write("        //获得图层几何对象\r\n");
      out.write("        var geometry = drawGeometryArgs.feature.geometry,\r\n");
      out.write("                measureParam = new SuperMap.REST.MeasureParameters(geometry), /* MeasureParameters：量算参数类。 客户端要量算的地物间的距离或某个区域的面积*/\r\n");
      out.write("                myMeasuerService = new SuperMap.REST.MeasureService(url1); //量算服务类，该类负责将量算参数传递到服务端，并获取服务端返回的量算结果\r\n");
      out.write("        myMeasuerService.events.on({ \"processCompleted\": measurePolygonCompleted });\r\n");
      out.write("\r\n");
      out.write("        //对MeasureService类型进行判断和赋值，当判断出是LineString时设置MeasureMode.DISTANCE，否则是MeasureMode.AREA\r\n");
      out.write("\r\n");
      out.write("        myMeasuerService.measureMode = SuperMap.REST.MeasureMode.AREA;\r\n");
      out.write("\r\n");
      out.write("        myMeasuerService.processAsync(measureParam); //processAsync负责将客户端的量算参数传递到服务端。\r\n");
      out.write("        //只有在面积测量完成后，才开可以使用保存按钮保存面积\r\n");
      out.write("        $(\"#saveButton\").removeAttr(\"disabled\");\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("  \t//距离测量结束调用事件\r\n");
      out.write("    function measureLineCompleted(measureEventArgs) {\r\n");
      out.write("    \tif(areaFlag == 0){\r\n");
      out.write("   \t\t  $(\"#area_result\").html(\"测量结果:\");\r\n");
      out.write("   \t\t  areaFlag += 1;\r\n");
      out.write("   \t  \t}\r\n");
      out.write("        var distance = measureEventArgs.result.distance;\r\n");
      out.write("        var  unit = measureEventArgs.result.unit;\r\n");
      out.write("        //alert(\"量算结果:\"+distance + \"米\");\r\n");
      out.write("        var distance_number = Number(distance);\r\n");
      out.write("        rt_distance += distance_number;\r\n");
      out.write("        //在显示前转换成千米，并省略到3位小数\r\n");
      out.write("        var rt_distance_km_round = (rt_distance/1000).toFixed(2);\r\n");
      out.write("        $(\"#area_result\").html(\"测量结果:\" + rt_distance_km_round + \"千米\"); \r\n");
      out.write("    }\r\n");
      out.write("\t\r\n");
      out.write("  //测量结束调用事件\r\n");
      out.write("    function measurePolygonCompleted(measureEventArgs) {\r\n");
      out.write("\t\tif(areaFlag == 0){\r\n");
      out.write("\t\t\t$(\"#area_result\").html(\"测量结果:\");\r\n");
      out.write("\t\t\tareaFlag += 1;\r\n");
      out.write("\t\t}\r\n");
      out.write("        var area = measureEventArgs.result.area,\r\n");
      out.write("        unit = measureEventArgs.result.unit;\r\n");
      out.write("        //alert(\"量算结果:\"+ area + \"平方米\");\r\n");
      out.write("        var area_number = Number(area); \r\n");
      out.write("        rt_area += area_number;\r\n");
      out.write("      //在显示前转换成千米，并省略到3位小数\r\n");
      out.write("        var rt_area_km_round = (rt_area/1000000).toFixed(2);\r\n");
      out.write("        $(\"#area_result\").html(\"测量结果:\" + rt_area_km_round + \"平方千米\"); \r\n");
      out.write("    }\r\n");
      out.write("  \r\n");
      out.write("  \t//移除图层要素\r\n");
      out.write("    function clearFeatures(){\r\n");
      out.write("  \t\t//测量结果归0\r\n");
      out.write("    \t$(\"#area_result\").html(\"测量结果:\");\r\n");
      out.write("  \t\t//清楚要素后把保存面积按钮设置成不可用\r\n");
      out.write("  \t\t$(\"#saveButton\").attr(\"disabled\",'disabled');\r\n");
      out.write("  \t\t//变量归0\r\n");
      out.write("  \t\trt_area = 0;\r\n");
      out.write("  \t\trt_distance = 0;\r\n");
      out.write("  \t\t//线矢量面清楚所有元素\r\n");
      out.write("        lineLayer.removeAllFeatures();\r\n");
      out.write("  \t\t//面矢量面清除所有元素\r\n");
      out.write("        polygonLayer.removeAllFeatures();\r\n");
      out.write("  \t\t//取消线矢量的编辑状态\r\n");
      out.write("        drawLine.deactivate();\r\n");
      out.write("  \t\t//曲线面矢量的编辑状态\r\n");
      out.write("        drawPolygon.deactivate();\r\n");
      out.write("    }\r\n");
      out.write("  \t\r\n");
      out.write("  \t//按钮转换为叶绿素模式\r\n");
      out.write("  \tfunction toChlModel() {\r\n");
      out.write("  \t\t//切换模式时切换按钮样式\r\n");
      out.write("  \t\t$(\"#btnchl\").attr(\"class\",\"btn btn-primary\");\r\n");
      out.write("  \t\t$(\"#btnrt\").attr(\"class\",\"btn btn-default\");\r\n");
      out.write("  \t\t//切换到叶绿素模式时，显示图标\r\n");
      out.write("  \t\t$(\"#colorbar\").attr(\"style\",'display:block');\r\n");
      out.write("  \t\t//切换到叶绿素模式时藻类色标隐藏\r\n");
      out.write("  \t\t$(\"#algbar\").attr(\"style\",'display:none');\r\n");
      out.write("  \t\t//切换图层样式\r\n");
      out.write("  \t\tlayer1.setVisibility(true);\r\n");
      out.write("        layer2.setVisibility(false);\r\n");
      out.write("        //设置显示图层\r\n");
      out.write("\t\tmap.setBaseLayer(layer1);\r\n");
      out.write("  \t}\r\n");
      out.write("  \t\r\n");
      out.write("  \t//按钮转换为赤潮模式\r\n");
      out.write("  \tfunction toRTModel() {\r\n");
      out.write("  \t\t//切换模式时切换按钮样式\r\n");
      out.write("  \t\t$(\"#btnrt\").attr(\"class\",\"btn btn-primary\");\r\n");
      out.write("  \t\t$(\"#btnchl\").attr(\"class\",\"btn btn-default\");\r\n");
      out.write("  \t\t//切换到叶绿素模式时，显示图标\r\n");
      out.write("  \t\t$(\"#algbar\").attr(\"style\",'display:block');\r\n");
      out.write("  \t\t//切换到赤潮模式时，隐藏图标\r\n");
      out.write("  \t\t$(\"#colorbar\").attr(\"style\",'display:none');\r\n");
      out.write("  \t\t//切换图层样式\r\n");
      out.write("  \t\tlayer1.setVisibility(false);\r\n");
      out.write("        layer2.setVisibility(true);\r\n");
      out.write("      \t//设置显示图层\r\n");
      out.write("\t\tmap.setBaseLayer(layer2);\r\n");
      out.write("  \t}\r\n");
      out.write("  \t\r\n");
      out.write("  \t//保存赤潮面积到数据库\r\n");
      out.write("  \t function saveArea() {\r\n");
      out.write("  \t\t$.post(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/pic/saveArea\", {\"area\":rt_area,\"date\":date_nomal},\r\n");
      out.write("  \t\t\t  function(data){\r\n");
      out.write("  \t\t\t\t\tif(data.status == 200) {\r\n");
      out.write("  \t\t\t\t\t\tsweetAlert(\"保存成功\");\r\n");
      out.write("  \t\t\t\t\t} else {\r\n");
      out.write("  \t\t\t\t\t\tsweetAlert(\"保存失败\", \"保存过程中遇到了一些问题!\", \"error\");\r\n");
      out.write("  \t\t\t\t\t}\r\n");
      out.write("  \t\t\t\t\t//保存操作结束后，将保存按钮设置为不可点击\r\n");
      out.write("  \t\t\t\t\t$(\"#saveButton\").attr(\"disabled\",'disabled');\r\n");
      out.write("  \t\t\t  });\r\n");
      out.write("  \t} \r\n");
      out.write("  \t\r\n");
      out.write(" \t$(function(){\r\n");
      out.write(" \t\t//发送get请求显示数据统计年份选项\r\n");
      out.write(" \t\t$.get(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/pic/selectYears\",\r\n");
      out.write(" \t\t\t\t  function(data){\r\n");
      out.write(" \t\t\t\t\tvar yearInfo = \"\"\r\n");
      out.write(" \t\t\t\t\t\tif(data != null) {\r\n");
      out.write(" \t\t\t\t\t\t\tfor(var i=0; i<data.data.length; i++) {\r\n");
      out.write(" \t\t\t\t\t\t\t\tyearInfo += '<li onclick=\"statisticByMonth(' + data.data[i] + ')\"><a href=\"javascript:void(0)\">' + data.data[i] + '</a></li>'\r\n");
      out.write(" \t\t\t\t\t\t\t}\r\n");
      out.write(" \t \t\t\t\t  \t\t$(\"#yearMenu\").html(yearInfo);\r\n");
      out.write(" \t\t\t\t\t\t}\r\n");
      out.write(" \t\t\t\t  });\r\n");
      out.write(" \t\t\r\n");
      out.write(" \t});\r\n");
      out.write(" \t\r\n");
      out.write(" \tfunction selectCartogram(year,month){\r\n");
      out.write(" \t\tisMonthMenuOpened = false;\r\n");
      out.write(" \t\t$.get(  \r\n");
      out.write(" \t\t\t\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/pic/selectAreaByMonth\",\r\n");
      out.write(" \t\t\t{ \"year\":year, \"month\":month },\r\n");
      out.write(" \t\t\tfunction(data){\r\n");
      out.write(" \t\t\t\t//页面加载完后，动态加载图表\r\n");
      out.write(" \t\t\t\tvar chart = Highcharts.chart('monthDate', {\r\n");
      out.write(" \t\t\t\t    chart: {\r\n");
      out.write(" \t\t\t\t        type: 'line'\r\n");
      out.write(" \t\t\t\t    },\r\n");
      out.write(" \t\t\t\t    title: {\r\n");
      out.write(" \t\t\t\t        text: month + '月'\r\n");
      out.write(" \t\t\t\t    },\r\n");
      out.write(" \t\t\t\t    xAxis: {\r\n");
      out.write(" \t\t\t\t        categories:data.data[0]\r\n");
      out.write(" \t\t\t\t        \t/* ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12','13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28','29', '30']  */\r\n");
      out.write(" \t\t\t\t    },\r\n");
      out.write(" \t\t\t\t    yAxis: {\r\n");
      out.write(" \t\t\t\t        title: {\r\n");
      out.write(" \t\t\t\t            text: '面积(平方公里)'\r\n");
      out.write(" \t\t\t\t        }\r\n");
      out.write(" \t\t\t\t    },\r\n");
      out.write(" \t\t\t\t    plotOptions: {\r\n");
      out.write(" \t\t\t\t        line: {\r\n");
      out.write(" \t\t\t\t            dataLabels: {\r\n");
      out.write(" \t\t\t\t                enabled: true          // 开启数据标签\r\n");
      out.write(" \t\t\t\t            },\r\n");
      out.write(" \t\t\t\t            enableMouseTracking: false // 关闭鼠标跟踪，对应的提示框、点击事件会失效\r\n");
      out.write(" \t\t\t\t        }\r\n");
      out.write(" \t\t\t\t    },\r\n");
      out.write(" \t\t\t\t    series: [{\r\n");
      out.write(" \t\t\t\t        name: '赤潮面积',\r\n");
      out.write(" \t\t\t\t        data: data.data[1]\r\n");
      out.write(" \t\t\t\t        \t/* [7.0, 6.9, 9.5, 1000000, 18.4, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6,7.0, 6.9, 9.5, 14.5, 18.4, 0, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6,25.2, 26.5, 23.3, 18.3, 13.9, 9.6] */\r\n");
      out.write(" \t\t\t\t    }]\r\n");
      out.write(" \t\t\t\t});\r\n");
      out.write(" \t\t\t }\r\n");
      out.write(" \t\t);\r\n");
      out.write(" \t\t\r\n");
      out.write("\t\t\r\n");
      out.write(" \t\t\r\n");
      out.write(" \t\t $(\"#cartogramButton\").trigger(\"click\"); \r\n");
      out.write(" \t}\r\n");
      out.write(" \t\r\n");
      out.write(" \t//统计信息选择月份\r\n");
      out.write(" \tfunction statisticByMonth(year) {\r\n");
      out.write(" \t\tif(isMonthMenuOpened != true){\r\n");
      out.write(" \t\t\tisMonthMenuOpened = true;\r\n");
      out.write(" \t\t\tvar d = dialog({\r\n");
      out.write(" \t \t\t    content: '请选择要查看的日期',\r\n");
      out.write(" \t\t\t    button: [\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '一月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"1\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '二月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"2\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '三月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"3\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '四月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"4\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '五月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"5\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '六月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"6\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '七月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"7\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '八月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"8\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '九月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"9\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '十月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"10\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '十一月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"11\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\r\n");
      out.write(" \t\t\t            value: '十二月',\r\n");
      out.write(" \t\t\t            callback: function () {\r\n");
      out.write(" \t\t\t            \tselectCartogram(year,\"12\");\r\n");
      out.write(" \t\t\t            }\r\n");
      out.write(" \t\t\t            \r\n");
      out.write(" \t\t\t        },\r\n");
      out.write(" \t\t\t        {\t\r\n");
      out.write(" \t\t                value: '取消',\r\n");
      out.write(" \t\t               callback: function () {\r\n");
      out.write(" \t\t            \t  isMonthMenuOpened = false;\r\n");
      out.write("\t\t\t            }\r\n");
      out.write(" \t\t            }\r\n");
      out.write(" \t\t\t    ]\r\n");
      out.write(" \t\t\t});\r\n");
      out.write(" \t\t\td.show();\r\n");
      out.write(" \t\t}\r\n");
      out.write(" \t\t\r\n");
      out.write(" \t}\r\n");
      out.write(" \t\r\n");
      out.write(" \t//点击主页云图时实际点击的是一个隐藏的input:cloudButton\r\n");
      out.write(" \t/* function clickCloudButton(){\r\n");
      out.write(" \t\t$(\"#cloudButton\").trigger(\"click\");\r\n");
      out.write(" \t} */\r\n");
      out.write(" \t\r\n");
      out.write(" \t//重新设计onchange方法来根据日期选择图片\r\n");
      out.write(" \tfunction changeDate() {\r\n");
      out.write(" \t\t//清楚矢量要素\r\n");
      out.write("  \t\tclearFeatures();\r\n");
      out.write("  \t\t//取得选择日期\r\n");
      out.write("  \t\tpickedDate = $(\"#dateInput\").val();\r\n");
      out.write("  \t\twindow.location.href = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/pic/changeDate?date=\" + pickedDate;\r\n");
      out.write(" \t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body onload=\"init()\">\r\n");
      out.write("<!-- 警告 -->\r\n");
      out.write("\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n");
      out.write("\t  <span aria-hidden=\"true\">&times;</span>\r\n");
      out.write("\t</button>\r\n");
      out.write("\t<!-- cartogramForm -->\r\n");
      out.write("\t<!-- 设置一个隐形的按钮，给按钮绑定data-target，从而使得按钮的点击事件出发后可以弹出统计图弹窗-->\r\n");
      out.write("\t<input id=\"cartogramButton\" type=\"hidden\" data-toggle=\"modal\" data-target=\"#cartogramForm\">\r\n");
      out.write("\t<!-- 隐藏按钮来接收回显日期 -->\r\n");
      out.write("\t<input id=\"dateInfo\" type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${newDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\r\n");
      out.write("\t<!-- 设置隐形按钮来回显手动测量的赤潮面积 -->\r\n");
      out.write("\t<input id=\"result\" type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${areaResult}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\r\n");
      out.write("\t<!-- 设置隐形按钮来回显自动测量的赤潮面积 -->\r\n");
      out.write("\t<input id=\"resultP\" type=\"hidden\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${areaOfPoint}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\r\n");
      out.write("\t<!-- 设置云图隐形按钮，主要是一个中介按钮，格式原因传递点击事件，把点击云图当做点击这个按钮 -->\r\n");
      out.write("\t<!-- <input id=\"cloudButton\" type=\"hidden\" data-toggle=\"modal\" data-target=\"#cloudPicture\"> -->\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<nav class=\"navbar navbar-default\">\r\n");
      out.write("\t  <div class=\"container-fluid\">\r\n");
      out.write("\t    <!-- Brand and toggle get grouped for better mobile display -->\r\n");
      out.write("\t    <!-- 标题栏 -->\r\n");
      out.write("\t    <div class=\"navbar-header\">\r\n");
      out.write("\t\t    <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\r\n");
      out.write("\t        <span class=\"sr-only\">Toggle navigation</span>\r\n");
      out.write("\t        <span class=\"icon-bar\"></span>\r\n");
      out.write("\t        <span class=\"icon-bar\"></span>\r\n");
      out.write("\t        <span class=\"icon-bar\"></span>\r\n");
      out.write("\t      </button>\r\n");
      out.write("\t      <a class=\"navbar-brand\" >浙江近海赤潮卫星遥感监测系统</a> \r\n");
      out.write("\t    </div>\r\n");
      out.write("\t    \r\n");
      out.write("\t    <!-- 日期选择控件 -->\r\n");
      out.write("\t\t<form class=\"navbar-form navbar-left\">\r\n");
      out.write("\t        <div class=\"form-group\">\r\n");
      out.write("                <div class=\"input-group date form_datetime\" data-link-field=\"dtp_input1\">\r\n");
      out.write("                \t<div class=\"input-group-addon\">日期:</div>\r\n");
      out.write("                    <input id=\"dateInput\" class=\"form-control\" size=\"10\" type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${oldDate}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" readonly onchange=\"changeDate()\">\r\n");
      out.write("                    <span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-calendar\"></span></span>\r\n");
      out.write("                   \t<!--  <span class=\"input-group-addon\"><span class=\"glyphicon glyphicon-remove\"></span></span> -->\r\n");
      out.write("                </div>\r\n");
      out.write("\t\t\t\t<!-- <input type=\"hidden\" id=\"dtp_input1\" value=\"\" /><br/> -->\r\n");
      out.write("\t          \t");
      out.write("\r\n");
      out.write("\t        </div>\r\n");
      out.write("      \t</form>\r\n");
      out.write("      \t\r\n");
      out.write("\t    <!-- Collect the nav links, forms, and other content for toggling -->\r\n");
      out.write("\t    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n");
      out.write("\t    \r\n");
      out.write("\t      <ul class=\"nav navbar-nav\">\r\n");
      out.write("\t\t    <!-- 叶绿素和赤潮切换框 -->\r\n");
      out.write("\t\t    <li>\r\n");
      out.write("\t\t\t    <div id=\"modelButton\" class=\"btn-group\" role=\"group\" aria-label=\"...\">\r\n");
      out.write("\t\t\t    \t<button id=\"btnrt\" type=\"button\" class=\"btn btn-primary\" style=\"width: 68px\" onclick=\"toRTModel()\">赤    潮</button>\r\n");
      out.write("\t\t\t\t\t<button id=\"btnchl\" type=\"button\" class=\"btn btn-default\" onclick=\"toChlModel()\">叶绿素</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t        <!-- <li class=\"active\"><a href=\"#\">历史记录<span class=\"sr-only\">(current)</span></a></li> -->\r\n");
      out.write("\t        <!-- <li><a href=\"#\" >历史记录<span class=\"sr-only\">(current)</span></a></li> -->\r\n");
      out.write("\t        <!-- <li><a data-toggle=\"modal\" data-target=\"#cloudPicture\" onclick=\"checkVal()\")>遥感云图</a></li> -->\r\n");
      out.write("\t        <!-- 遥感云图按钮 -->\r\n");
      out.write("\t        <!-- <li><a href=\"#\" onclick=\"clickCloudButton()\" >遥感云图</a></li> -->\r\n");
      out.write("\t        \r\n");
      out.write("\t        <!-- 数据统计下拉框 -->\r\n");
      out.write("\t\t\t<li class=\"dropdown\">\r\n");
      out.write("\t          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" onclick=\"selectYears()\">数据统计<span class=\"caret\"></span></a>\r\n");
      out.write("\t          <ul id=\"yearMenu\" class=\"dropdown-menu\">\r\n");
      out.write("\t            <!-- <li onclick=\"statisticByMonth()\"><a href=\"javascript:void(0)\"></a></li> -->\r\n");
      out.write("\t          </ul>\r\n");
      out.write("\t        </li> \r\n");
      out.write("\t        \r\n");
      out.write("\t        <!-- 测量工具下拉框 -->\r\n");
      out.write("\t        <!-- \r\n");
      out.write("\t       \t\t<span class=\"caret\"> 这是下拉框后面的小三角形\r\n");
      out.write("\t        \tsr-only是隐藏属性的意思\r\n");
      out.write("\t        -->\r\n");
      out.write("\t         <li class=\"dropdown\">\r\n");
      out.write("\t          <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">测量工具 <span class=\"caret\"></span></a>\r\n");
      out.write("\t          <ul class=\"dropdown-menu\">\r\n");
      out.write("\t            <li onclick=\"distanceMeasure()\"><a href=\"javascript:void(0)\" >距离量算</a></li>\r\n");
      out.write("\t            <li onclick=\"areaMeasure()\" ><a href=\"javascript:void(0)\">面积量算</a></li>\r\n");
      out.write("\t            <li role=\"separator\" class=\"divider\"></li>\r\n");
      out.write("\t            <li onclick=\"clearFeatures()\" ><a href=\"javascript:void(0)\">清除</a></li>\r\n");
      out.write("\t            <!-- <li role=\"separator\" class=\"divider\"></li>\r\n");
      out.write("\t            <li><a href=\"#\">One more separated link</a></li> -->\r\n");
      out.write("\t          </ul>\r\n");
      out.write("\t        </li>\r\n");
      out.write("\t         \r\n");
      out.write("\t        <!-- 测量结果显示行 -->\r\n");
      out.write("\t        <li><a id=\"area_result\" value=\"\" href=\"#\" disable=\"\">测量结果:</a></li> \r\n");
      out.write("\t        <li style=\"top:8px;right: 6px\">\r\n");
      out.write("\t        <!-- 保存按钮只能保存面积 -->\r\n");
      out.write("\t\t    \t<input id=\"saveButton\" class=\"btn btn-default\" type=\"submit\" value=\"保存\" disabled=\"disabled\" onclick=\"saveArea()\">\r\n");
      out.write("\t\t    </li>\r\n");
      out.write("\t\t  </ul>\r\n");
      out.write("\t\t  <!-- 登录后台功能 -->\r\n");
      out.write("\t      ");
      out.write("\r\n");
      out.write("      \t   <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("\t\t       <li>\r\n");
      out.write("\t\t        \t<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/index\">管理</a>\r\n");
      out.write("\t\t        \t");
      out.write("\r\n");
      out.write("\t\t        </li>\r\n");
      out.write("      \t  </ul> \r\n");
      out.write("\t    </div><!-- /.navbar-collapse -->\r\n");
      out.write("\t  </div><!-- /.container-fluid -->\r\n");
      out.write("\t</nav>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 叶绿素色标 -->\r\n");
      out.write("\t<!-- 直接在页面最底下位置放置一个image，通过css位置调整让其位置移到地图上 -->\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<div style=\"position:fixed;bottom:50px;right:25px;\">\r\n");
      out.write("\t\t<img id=\"colorbar\" alt=\"色标路径未找到\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/images/colorbar1.png\" style=\"display:none;position:relative;bottom:300px;\">\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div style=\"position:fixed;bottom:50px;right:25px\">\r\n");
      out.write("\t\t<img id=\"algbar\" alt=\"色标路径未找到\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/images/algbar1.jpg\" style=\"width:10;display:block;position:relative;bottom:300px\">\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!-- 云图功能取消，云图弹出框 -->\r\n");
      out.write("\t<!-- <div id=\"cloudPicture\" class=\"modal fade bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\">\r\n");
      out.write("\t    <div class=\"modal-dialog modal-sm\">\r\n");
      out.write("\t    <div class=\"modal-content\" style=\"right:250px;top:50px\">\r\n");
      out.write("\t      <img id=\"cloudImage\" src=\"\" alt=\"该日云图信息未下载\" style=\"height:500px;weight:500px\">\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div> -->\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 图表弹出层 -->\r\n");
      out.write("\t<div id=\"cartogramForm\" class=\"modal fade bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\">\r\n");
      out.write("\t    <div class=\"modal-dialog modal-sm\">\r\n");
      out.write("\t    <div class=\"modal-content\" style=\"right:250px;top:50px\">\r\n");
      out.write("\t      \t<div id=\"monthDate\"></div> \r\n");
      out.write("\t    </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t$('.form_datetime').datetimepicker({\r\n");
      out.write("\t\t\tformat:\"yyyy/mm/dd\",\r\n");
      out.write("\t        language:  'zh-CN', \r\n");
      out.write("\t        weekStart: 1,\r\n");
      out.write("\t        todayBtn:  1,\r\n");
      out.write("\t\t\tautoclose: 1,\r\n");
      out.write("\t\t\ttodayHighlight: 1,\r\n");
      out.write("\t\t\tstartView: 2,\r\n");
      out.write("\t\t\tminView: 2,\r\n");
      out.write("\t\t\tforceParse: 0\r\n");
      out.write("\t    });\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
